# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class FunctionDefinitionPromptTemplateBlockPropertiesRequest(pydantic.BaseModel):
    function_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The name identifying the function.
    """

    function_description: typing.Optional[str] = pydantic.Field(default=None)
    """
    A description to help guide the model when to invoke this function.
    """

    function_parameters: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(default=None)
    """
    An OpenAPI specification of parameters that are supported by this function.
    """

    function_forced: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Set this option to true to force the model to return a function call of this function.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
